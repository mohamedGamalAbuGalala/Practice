--------------------------------------------------Thinking - Search Space and Output Analysis--------------------------------------

One of important ways to tackle a problem is to start from the output and analyze it and its space.

	When we are solving a problem, there could be many candidate solutions for it. 
		A candidate solution is a member of a set of possible solutions to a given problem.
		A candidate solution does not have to be the target solution to the problem – it is just part of the set that satisfies all constraints.
		The space of all candidate solutions is called the feasible region, feasible set, SEARCH SPACE, or solution space.
		Every candidate solution C, is good IFF satisfiyConstraints(C) = TRUE
		Every candidate solution C is mapped to F(C) which is the evalaution of this C.
		
		
There are 3 things to consider:
	Let S = {C1, C2, ...} Set of candidate solutions
	Let's Define F(C) according to problem Statement.
	Let F(C) = O, the output of the function.
	
	We need to think in:
		1) Size of Cs		- # of candidate solutions
		2) Nature of F 		- The function that generates the output
		3) Output Bounding	- Output of the function.
		
------------------------------------------------- Search Space Size |S| -------------------------------------------------		
	Sometimes, all seacrh space size |S|, is small enough to brute force it.
		Brute-force search(exhaustive search) is to systematically enumerating all possible candidates for the solution and 
			checking whether each candidate satisfies the problem's statement.

	E.g. given an array of length N = 1000, what is maximum difference between a pair of numbers?
		What is search space? It seems we could try every pair, and maximimze among them. 
		Then we try N^2 pair, overall 10^6 solution, which is doable! So brute force is enough.
	
		Let Say array is: 2 5 1 4 -> Then we try 
			C			: (2, 5), (2, 1), (2, 4), (5, 1), (5, 4), (1, 4)
			F(C) = |A-B|: 	3, 		1, 		2, 		4, 		1, 		3
				Then best C is (5, 1) with F(C) = 4
				See 3D Image.
				
				
		What if N = 100000, then we have 10^10 pair! Then exhaustive search is impossible! Typically like many problems.
		
		Then, we need to think in better ways. Better algorithm may be many thing! Let's give an observation.
			Observation: The maximum difference will be between the smallest and largest number!
			Then, if we sorted the array, last-first is the solution.
			Sort is nlogn. So 10^5 is dobale.
			Sorted array: 1 2 4 5. Solution is 5-1=4	
				
	Sometimes, we implement the exhaustive search, but we do lots tricks to make it within time using
		E.g. Search space pruning, Branch and Bound, Memoization.... 
	
------------------------------------------------- Nature of target Function -------------------------------------------------

We need to think about the requested function. Sometimes there are popular styles and sometimes it is adhock. Let's see adhock cases.

	Decision problem (True / False)
		2 SAT, Bellman Difference constraints - Games(Nim/Grundy) - Graph Conflict? Is Bipartite? Do system of linear equation has solution?

	Optimization problems: Find minimum/maximum F()?
		First thing to think about are all algorithms that could do optimization.
			Common: BF, Dfs, BFS, DP, Greedy, Bi/ternary Search - D & C - B & B - RMQ/LCA - Line sweep - MCMF ...
			Minimization: Min cut / vertex - MST - Dijkstra - Convex hull ...
			Maximization: Max flow - Max Independent Set - GCD ...
		
	Counting problems: 
		E.g. DP - Combinations - Permutations - Inclusion-exclusion - Matrix power
	
		In counting problems, especially DP problems, answer may be computed in different ways. One of them mab be the clue.
			
			Say, we have M segments, each of length L, and want to know how many ways to count configurations?
				You could think data is built layer by layer, and next layer is connected with sometihng in old layer (3 layers)
				You could think in segments in traversal oder, from left to right...going bottom and up
			
				---1---     --4----     ---6---       ---10---
				   ---2---                ---7--- ---9---
				        --3---      --5---     ---8---		
		
		
Generally we need to think in F and its nature, especially in adhock cases

Equations reformulation
	In many cases an equation could be extracted (if not given explicty), and reformulating make solution clear
	Nested and triple linear summations most probably will be reformulated

------------------------------------------------- Output Bounding -------------------------------------------------

It is very important to bound the output of the function F. That's we bound its min value or/and its max value?
	In many cases, this is the clue. You may estimate different bounds, based on your needs.
		That is say, we could do it using O(nlogn) algorithm. If we managed to do a bound of < 100000 for output.
		Then it is enough, ALTHOUGH correct bound is 5000.
		
		
	Let's try problem SRM522-1-2(CorrectMultiplication)
		Given a, b, c: Find minimum value of |A - a| + |B - b| + |C - c|, where A, B, and C are positive integers satisfying A * B = C.
			Once: Let a, b, and c <= 10^6
			Once: Let a, b, and c <= 10^9
			
		
		You could think in 2 synonymous things to bound: (A, B, C) or RESULT = |A - a| + |B - b| + |C - c|
		
		Clearly bounding the RESULT bound the 3 variables, espeically due to nature of multiplication.
		
			What is best RESULT  ? A=a, B=b, C=c, then RESULT = 0
			What is worst RESULT ? A=a, B=1, C=1, then RESULT = a + b + c - 3
			
			How the worst case bound A, B and C?
				 Let C = Result+c, then |a + b + c - 3 		+c		- c| = |a + b + c - 3|
				 	Then Clearly, C must be <= Result+c				 
				 	Similarly:  A <= Result+a and B <= Result+b
				 
				 Then for every A <= Result+a and for every B <= Result+b	do check! This will never run in time!
				 
				 
				 We know that A*B = C, then A <= C and B <= C	--> Then A <= Result+c and B <= Result+c too. Doesn't help!
				 
				 More utilization for *, Let A=X, then B <= C/X. That is B is tightly bounded with value of A.
				 
				 Then for every A <= Result+c and for every B <= C/A	do check. This fit for case <= 10^6 ONLY
				 
				 The intersting thing is that, Given A, we could approzimate B = c/A. It could be fraction, so try -1, +1. Still only fit to 10^6
				 

				Let's think in multiplication more! 12 = 1*12, 2*6, 3*4, 4*3, 6*2, 12*1
					Wait, after sqrt is repetation for what is before it! A, B are the 2 factors of C.
					
					Then, we could only try A up to sqrt(Result+c). In a real contest, you could think, i don't need to know result+c. Assume it even to 10^10!
					Trying As up to sqrt, doesn't consider cases when it is after sqrt. So swap (a, b) and do same. This way we guarntee it is tried.
			
		
	
	Let's try problem SRM507-1-2(CubePacking)
		We have Ns cubes with edge length 1 and Nb cubes with edge length L. Ns(10^9), Nb(10^6), L(10).
		What is min volume of box to pack all cubes.
		
		You could think in 2 synonymous things to bound: (X, Y, Z) or RESULT = X*Y*Z
			Clearly answer(2, 4, 5) is same as (5, 4, 2). So we consider only X <= Y <= Z
			
		BruteForce:
			For each X up to some bound
				For each Y up to some bound
					Find Z given X, Y
					
			Unless we found so tight bounds, we should think in other approach!
			
			Let's try to bound the result. 
				If we have Nb cube only, result is L^3 * Nb = 10^9
				If we have too Ns cube, we could set them in base L^2. So answer is 10^9 + 10^9/10 <= 2 * 10^9
				So we have a bound 2 Milliars for the result. Big? No, it is X*Y*Z <= 2 * 10^9. See how this would affect X, Y, Z
				
				Let bound be 1000. What is max values: 10*10*10. As if X = 11, then Y < X and we said X <= Y <= Z
				So actually X is limited to Cube root, Result^(1/3)
					Similarly, if we have an X, then Y is limited such that Z >= Y. Then X * Y * Y <= RESULT
	
					for (ll x = L; x <= limit/x && x*x <= limit / x; ++x) {				// make sure x * x * x <= limit
						for (ll y = x; x <= limit / y && x * y <= limit / y; ++y) {		// make sure x * y * y <= limit
						
						
						
						
						
						
						
						
						
						
						
						